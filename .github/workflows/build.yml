name: Build-AprilTag-Plugins

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Pull apriltag
        run: |
          mkdir -p third_party
          git clone --depth=1 https://github.com/AprilRobotics/apriltag.git third_party/apriltag
          cmake -S third_party/apriltag -B third_party/apriltag/build -DBUILD_SHARED_LIBS=ON
          cmake --build third_party/apriltag/build --config Release
      - name: Build ext
        run: |
          sudo apt-get update && sudo apt-get install -y cmake ninja-build
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build build --config Release
          mkdir -p out/Linux
          cp build/libAprilTag.so out/Linux/ || true
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-linux
          path: out/Linux

  windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4
      - name: Pull apriltag
        shell: bash
        run: |
          mkdir -p third_party
          git clone --depth=1 https://github.com/AprilRobotics/apriltag.git third_party/apriltag
      - name: Configure
        run: cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
      - name: Build
        run: cmake --build build --config Release
      - name: Package
        shell: bash
        run: |
          mkdir -p out/Windows
          if [ -f build/Release/AprilTag.dll ]; then cp build/Release/AprilTag.dll out/Windows/; fi
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-windows
          path: out/Windows

  macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Pull apriltag
        run: |
          mkdir -p third_party
          git clone --depth=1 https://github.com/AprilRobotics/apriltag.git third_party/apriltag
      - name: Build ext
        run: |
          brew install cmake ninja
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
          cmake --build build --config Release
          mkdir -p out/macOS/AprilTag.bundle/Contents/MacOS
          if [ -f build/libAprilTag.dylib ]; then cp build/libAprilTag.dylib out/macOS/AprilTag.bundle/Contents/MacOS/AprilTag; elif [ -f build/AprilTag.dylib ]; then cp build/AprilTag.dylib out/macOS/AprilTag.bundle/Contents/MacOS/AprilTag; fi
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-macos
          path: out/macOS

  android:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        abi: [armeabi-v7a, arm64-v8a]
    steps:
      - uses: actions/checkout@v4
      - name: Pull apriltag
        run: |
          mkdir -p third_party
          git clone --depth=1 https://github.com/AprilRobotics/apriltag.git third_party/apriltag
      - uses: nttld/setup-ndk@v1
        with: { ndk-version: r25c }
      - name: Install Ninja
        run: sudo apt-get update && sudo apt-get install -y ninja-build
      - name: Configure
        shell: bash
        run: |
          set -e
          NDK="$ANDROID_NDK_ROOT"
          if [ -z "$NDK" ]; then NDK="$ANDROID_NDK_HOME"; fi
          if [ -z "$NDK" ]; then NDK=$(ls -d $HOME/**/android-ndk-*/ 2>/dev/null | head -n1); fi
          echo "Using NDK at: $NDK"
          cmake -B build-${{ matrix.abi }} -G Ninja \
            -DANDROID=ON -DANDROID_ABI=${{ matrix.abi }} -DANDROID_PLATFORM=android-21 \
            -DCMAKE_TOOLCHAIN_FILE=$NDK/build/cmake/android.toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON
      - name: Build
        run: cmake --build build-${{ matrix.abi }} --config Release
      - name: Package
        run: |
          mkdir -p out/Android/${{ matrix.abi }}
          cp build-${{ matrix.abi }}/libAprilTag.so out/Android/${{ matrix.abi }}/ || true
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-android-${{ matrix.abi }}
          path: out/Android/${{ matrix.abi }}

  ios:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - name: Pull apriltag
        run: |
          mkdir -p third_party
          git clone --depth=1 https://github.com/AprilRobotics/apriltag.git third_party/apriltag
      - name: Configure (iOS static)
        run: |
          cmake -B build-ios -G Xcode \
            -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES="arm64" \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
            -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO \
            -DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED=NO \
            -DBUILD_TESTING=OFF -DBUILD_PYTHON_WRAPPER=OFF -DBUILD_EXAMPLES=OFF -DAPRILTAG_BUILD_EXAMPLES=OFF
      - name: Build
        run: cmake --build build-ios --config Release -- -quiet
      - name: Package
        run: |
          mkdir -p out/iOS
          if [ -f build-ios/Release-iphoneos/libAprilTag.a ]; then cp build-ios/Release-iphoneos/libAprilTag.a out/iOS/; fi
      - uses: actions/upload-artifact@v4
        with:
          name: plugins-ios
          path: out/iOS


